package String;

import java.util.Arrays;

/**
 * Leetcode 38. Count and Say
 * https://leetcode.com/problems/count-and-say/description/
 * Find the n’th term in Look-and-say (Or Count and Say) Sequence. 
 * The look-and-say sequence is the sequence of below integers: 1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, …
 * How is above sequence generated? n’th term in generated by reading (n-1)’th term.
 * The first term is "1"
 * Second term is "11", generated by reading first term as "One 1" (There is one 1 in previous term)
 * Third term is "21", generated by reading second term as "Two 1"
 * Fourth term is "1211", generated by reading third term as "One 2 One 1" and so on
 * Code from: https://leetcode.com/problems/count-and-say/discuss/15995/?page=1 https://www.geeksforgeeks.org/look-and-say-sequence/
 * Refer code and explanation from: https://www.geeksforgeeks.org/look-and-say-sequence/
 * @author NisuBhakti
 * Easy
 * Facebook
 */

public class CountAndSay {
    
    public static String countAndSay(int n) {
        if(n <= 0) return "-1";
        String result = "1";
        
        System.out.println("n: "+n);
        
        for(int i = 1; i < n; i ++) {
            result = build(result);
        }
        System.out.println("result: "+result);
        return result;
    }
    
    public static String build(String result) {
        StringBuilder builder = new StringBuilder();
        int p = 0;
        
        while(p < result.length()) {
        	System.out.println("p: "+p+" result: "+result);
            
        	char val = result.charAt(p);
            int count = 0;
            System.out.println("val: "+val);
                        
            while(p < result.length() && result.charAt(p) == val) {
                p++;
                count++;
                System.out.println("p: "+p+" count: "+count);
            }
            System.out.println("builder: "+builder);
            
            builder.append(String.valueOf(count));
            builder.append(val);
            
            System.out.println("builder: "+builder);
        }
        return builder.toString();
    }
    
    //Refer this
    // Returns n'th term in look-and-say sequence 
    public static String countnndSay(int n) 
    { 
	    // Base cases 
	    if(n == 1)     
	    	return "1"; 
	    
	    if(n == 2)     
	    	return "11"; 
  
	    // Find n'th term by generating all terms from 3 to n-1. Every term is generated using previous term 
	    // Initialize previous term 
	    String str = "11";  
	    for(int i=3; i<=n; i++) 
	    { 
	        // In below for loop, previous character is processed in current iteration. That is why a dummy character is  
	        // added to make sure that loop runs one extra iteration. 
	        str = str + '$'; 
	        System.out.println("str: "+str);
	        
	        int cnt = 1; // Initialize count of matching chars 
	        String tmp = ""; // Initialize i'th term in series 
	        char[] arr = str.toCharArray(); 
	        
	        System.out.println("cnt: "+cnt+" arr: "+Arrays.toString(arr));
	          
	        // Process previous term to find the next term 
	        for(int j=1; j<str.length(); j++) 
	        { 
	        	System.out.println("j: "+j+" arr[j]: "+arr[j]+" arr[j-1]: "+arr[j-1]);

	        	// If current character does't match 
	            if(arr[j] != arr[j - 1]) 
	            { 
	            	System.out.println("tmp: "+tmp+" cnt: "+cnt);
	            	// Append count of str[j-1] to temp 
	                tmp = tmp + cnt; 
	                
	                System.out.println("tmp: "+tmp+" arr[j - 1]: "+arr[j - 1]);
	  
	                // Append str[j-1] 
	                tmp = tmp + arr[j - 1]; 
	                System.out.println("tmp: "+tmp);
	                
	                // Reset count 
	                cnt = 1; 
	            } 
	            // If matches, then increment count of matching characters 
	            else { 
	            	cnt++;
	            }
	        } 
	        System.out.println("tmp: "+tmp+" str: "+str);

	        // Update str 
	        str = tmp; 
	    } 
	    return str; 
    } 
      
	public static void main(String[] args) {
		int n = 5;
		System.out.println(countnndSay(n));
	}
}